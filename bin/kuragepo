#!/usr/bin/env perl
use strict;
use warnings;

use JSON;
use Getopt::Long ();
use Test::TCP;

use AnyEvent::MPRPC;
use AnyEvent::Gearman::Client;
use AnySan;
use AnySan::Provider::IRC;

my $parser = Getopt::Long::Parser->new(
    config => [ "no_ignore_case", "pass_through" ],
);
my($rpc_host, $rpc_port, $irc_server, $irc_port, $irc_keyword, $irc_nickname, $no_post_with_join) =
    ('127.0.0.1', 4989, undef, 6667, undef, 'kuragepo', 0);
$parser->getoptions(
    'o|host=s'     => \$rpc_host,
    'p|port=i'     => \$rpc_port,
    'S|Server=s'   => \$irc_server,
    'P|Port=i'     => \$irc_port,
    'K|Keyword=s'  => \$irc_keyword,
    'N|Nickname=s' => \$irc_nickname,
#    'h|help'       => \$options{help},
#    'v|version'    => \$options{version},
);

die "Missing mandatory parameter: irc_server" unless defined $irc_server;

my $gearmand_port = Test::TCP::empty_port;
warn "startup gearmand on $rpc_host:$gearmand_port";
my $gearmand_pid = fork();
if ($gearmand_pid == 0) {
    exec 'gearmand', '-p', $gearmand_port;
}
END {
    kill 9, $gearmand_pid;
    warn "kill gearmand $gearmand_pid";
}

warn 'connecting to ' . join ' ', ($irc_server, $irc_port, ($irc_keyword || ''), $irc_nickname);

my $irc = irc $irc_server,
    key      => $irc_server,
    port     => $irc_port,
    password => $irc_keyword,
    nickname => $irc_nickname,
    channels => {
    };

warn "startup mprpc server on $rpc_host:$rpc_port";
my $rpc_server = mprpc_server $rpc_host, $rpc_port;
my %workers;

sub cleanup_workers {
    my $w = shift;
    $workers{$w} = time if defined $w;
    my @delete;
    while (my($worker, $time) = each %workers) {
        next if time() - 90 < $time;
        push @delete, $worker;
    }
    for my $worker (@delete) {
        warn "$worker is removed";
        delete $workers{$worker};
    }
}

$rpc_server->reg_cb(
    register => sub {
        my ($res_cv, $args) = @_;
        if ($workers{$args->{worker}}) {
            warn "$args->{worker} is registerd";
            cleanup_workers(undef);
            return $res_cv->result('');
        }
        cleanup_workers($args->{worker});
        warn "registerd $args->{worker}";
        $res_cv->result({
            gearmand_host => $rpc_host,
            gearmand_port => $gearmand_port,
        });
    },
    ping => sub {
        my ($res_cv, $args) = @_;
        warn "ping $args->{worker}";
        cleanup_workers($args->{worker});
        $res_cv->result('pong');
    },
    join => sub {
        my ($res_cv, $args) = @_;
        cleanup_workers($args->{worker});
        $irc->join_channel($args->{channel});
        $res_cv->result('ok');
    },
    leave => sub {
        my ($res_cv, $args) = @_;
        cleanup_workers($args->{worker});
        $irc->leave_channel($args->{channel});
        $res_cv->result('ok');
    },
);

my $gearman = AnyEvent::Gearman::Client->new(
    job_servers => ["$rpc_host:$gearmand_port"],
);

AnySan->register_listener(
    main => {
        cb => sub {
            my $receive = shift;
            return unless defined $receive->message && defined $receive->from_nickname;
            for my $worker (keys %workers) {
                $gearman->add_task(
                    $worker => encode_json(+{
                        from_nickname => $receive->from_nickname,
                        message       => $receive->message,
                    }),
                    on_complete => sub {
                        my $res = $_[1];
                        return unless $res;
                        for my $line (split /\n/, $res) {
                            next unless $line;
                            $receive->send_reply($line);
                        }
                    },
                    on_fail => sub {
                        # job failed
                    },
                );
            }
        },
    },
);

AnySan->run;

